<?php
/**
 * @file
 * Zend Gdata OAuth client library
 */

/**
 * Implementation of hook_help()
 */
function gdata_oauth_help($path, $arg) {
  switch ($path) {
    case 'admin/settings/gdata':
      return t('OAuth authentication is enabled for Google Data. Check out authentication parameters on <a href="@oauth-settings">OAuth settings</a>.', array('@oauth-settings' => url('admin/settings/oauth/google')));
  }
}

/**
 * Implementation hook_autoload_info().
 */
function gdata_oauth_autoload_info() {
  $zend_path = zend_get_path();
  return array(
    'Drupal_Gdata_OAuth_Client'          => array('file' => 'Drupal_Gdata_OAuth_Client.inc'),
  );
}

/**
 * Implementation of hook_menu()
 */
function gdata_oauth_menu() {
  // User authentication status
  $items['user/%user/gdata/oauth'] = array(
    'title' => 'Authorize',
    'page callback' => 'gdata_oauth_user_account_page',
    'page arguments' => array(1),
    'access callback' => 'gdata_user_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 100, 
  );
  return $items;
}

/**
 * Wrapper for user account page
 */
function gdata_oauth_user_account_page($account) {
  module_load_include('pages.inc', 'oauth_google');
  return drupal_get_form('oauth_google_user_account_form', $account); 
}

/**
 * Check google authentication
 * 
 * @param $account
 *   Drupal user account object, defaults to current user
 * @param $redirect
 *   Whether to redirect to authentication pages in case we need it.
 */
function gdata_oauth_user_check($account = NULL, $consumer = NULL, $redirect = TRUE) {
  global $user;
  
  $account = $account ? $account : $user;
  $consumer = $consumer ? $consumer : gdata_oauth_get_consumer();
  if (!$consumer) {
    drupal_set_message(t('Google Data consumer is not set up.', 'error'));
  }
  elseif ($token = gdata_oauth_get_user_token($account, $consumer)) {
    return $token;
  }
  else {
    // User not authenticated to Google
    drupal_set_message(t('You need to authenticate with your Google Account.'), 'warning');
    if ($redirect) {
      drupal_goto('user/' . $account->uid . '/gdata/oauth');
    }
  }
}

/**
 * Get consumer, creates a new one if missing
 * 
 * @return DrupalOAuthConsumer
 */
function gdata_oauth_get_consumer() {
  static $consumer;

  if (!isset($consumer)) {
    // We use default OAuth Google consumer
    $consumer = oauth_google_get_consumer();
  }

  return $consumer;
}

/**
 * Get access/request token for user account
 * 
 * @return Zend_Oauth_Token_Access
 */
function gdata_oauth_get_user_token($account, $consumer = NULL) {
  $consumer = $consumer ? $consumer : gdata_oauth_get_consumer();
  if ($user_token = oauth_google_get_user_token($account, $consumer, 'access')) {
    $token = new Zend_Oauth_Token_Access();
    $token->setToken($user_token->key);
    $token->setTokenSecret($user_token->secret);
    return $token;
  }
}

/**
 * Get http Oauth client
 * 
 * @return Drupal_Gdata_OAuth_Client
 * 
 */
function gdata_oauth_get_client($account, $consumer = NULL, $token = NULL) {
  $consumer = $consumer ? $consumer : gdata_oauth_get_consumer();
  $token = $token ? $token : gdata_oauth_get_user_token($account, $consumer);
  return new Drupal_Gdata_OAuth_Client($consumer, $token);
}

/**
 * Get token information.
 * 
 * This uses AuthSub and needs a private RSA key. The method works both for AuthSub/OAuth tokens
 */
function gdata_oauth_get_token_info($token) {
  if ($private_key = gdata_get_private_key()) {
    $client = new Zend_Gdata_HttpClient();
    $client->setAuthSubToken($token->getToken());
    $client->setAuthSubPrivateKey($private_key);
    $output = Zend_Gdata_AuthSub::getAuthSubTokenInfo($token->getToken(), $client);
  }
  else {
    $output .= t('Cannot get token information. You need to set up an RSA private key for this feature to work.');
  }
  return $output;
}

/**
 * Get scope as single string
 */
function gdata_oauth_get_scope() {
  return variable_get('oauth_google_default_scope', OAUTH_GOOGLE_DEFAULT_SCOPE);
}